"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[908],{48160:function(e){e.exports=JSON.parse('{"functions":[{"name":"isCameraState","desc":"Returns true if the result is a camera state","params":[{"name":"value","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"boolean"}],"function_type":"static","source":{"line":19,"path":"src/camera/src/Client/CameraState.lua"}},{"name":"new","desc":"Constructs a new CameraState","params":[{"name":"cameraFrame","desc":"","lua_type":"CameraFrame | Camera"},{"name":"cameraFrameDerivative","desc":"","lua_type":"CameraFrame?"}],"returns":[{"desc":"","lua_type":"CameraState"}],"function_type":"static","source":{"line":29,"path":"src/camera/src/Client/CameraState.lua"}},{"name":"Set","desc":"Set another camera state. Typically used to set Workspace.CurrentCamera\'s state to match this camera\'s state","params":[],"returns":[],"function_type":"method","source":{"line":125,"path":"src/camera/src/Client/CameraState.lua"}}],"properties":[],"types":[],"name":"CameraState","desc":"Data container for the state of a camera.","source":{"line":5,"path":"src/camera/src/Client/CameraState.lua"}}')}}]);