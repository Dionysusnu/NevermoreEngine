"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[23829],{84760:function(e){e.exports=JSON.parse('{"functions":[{"name":"New","desc":"Creates a new function which will return an observable that, given the props\\nin question, will construct a new instance and assign all props. This is the\\nequivalent of a pipe-able Rx command.\\n\\n```lua\\nBlend.New \\"ScreenGui\\" {\\n\\tParent = game.Players.LocalPlayer.PlayerGui;\\n\\t[Blend.Children] = {\\n\\t\\tBlend.New \\"Frame\\" {\\n\\t\\t\\tSize = UDim2.new(1, 0, 1, 0);\\n\\t\\t\\tBackgroundTransparency = 0.5;\\n\\t\\t};\\n\\t};\\n};\\n\\n```","params":[{"name":"className","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"(props: { [string]: any; }) -> Observable<Instance>"}],"function_type":"static","source":{"line":49,"path":"src/blend/src/Client/Blend/Blend.lua"}},{"name":"State","desc":"Creates a new Blend State which is actually just a ValueObject underneath.","params":[{"name":"defaultValue","desc":"","lua_type":"T"}],"returns":[{"desc":"","lua_type":"ValueObject<T>"}],"function_type":"static","source":{"line":81,"path":"src/blend/src/Client/Blend/Blend.lua"}},{"name":"Computed","desc":"Takes a list of variables and uses them to compute an observable that\\nwill combine into any value. These variables can be any value, and if they\\ncan be converted into an Observable, they will be, which will be used to compute\\nthe value.\\n\\n```lua\\nlocal verbState = Blend.State(\\"hi\\")\\nlocal nameState = Blend.State(\\"alice\\")\\n\\nlocal computed = Blend.Computed(verbState, nameState, function(verb, name)\\n\\treturn verb .. \\" \\" .. name\\nend)\\n\\ncomputed:Subscribe(function(sentence)\\n\\tprint(sentence)\\nend) --\x3e \\"hi alice\\"\\n\\nnameState.Value = \\"bob\\" --\x3e \\"hi bob\\"\\nverbState.Value = \\"bye\\" --\x3e \\"bye bob\\"\\nnameState.Value = \\"alice\\" --\x3e \\"bye alice\\"\\n```","params":[{"name":"...","desc":"","lua_type":"A series of convertable states, followed by a function at the end."}],"returns":[{"desc":"","lua_type":"Observable<T>"}],"function_type":"static","source":{"line":128,"path":"src/blend/src/Client/Blend/Blend.lua"}},{"name":"OnChange","desc":"Short hand to register a propertyEvent changing\\n\\n```lua\\nBlend.mount(workspace, {\\n\\t[Blend.OnChange \\"Name\\"] = function(name)\\n\\t\\tprint(name)\\n\\tend;\\n}) --\x3e Immediately will print \\"Workspace\\"\\n\\nworkspace.Name = \\"Hello\\" --\x3e Prints \\"Hello\\"\\n```","params":[{"name":"propertyName","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"(instance: Instance) -> Observable"}],"function_type":"static","source":{"line":178,"path":"src/blend/src/Client/Blend/Blend.lua"}},{"name":"OnEvent","desc":"Short hand to register an event from the instance\\n\\n```lua\\n\\tBlend.mount(workspace, {\\n\\t\\t[Blend.OnEvent \\"ChildAdded\\"] = function(child)\\n\\t\\t\\tprint(\\"Child added\\", child)\\n\\t\\tend;\\n\\t})\\n\\n\\tlocal folder = Instance.new(\\"Folder\\")\\n\\tfolder.Name = \\"Hi\\"\\n\\tfolder.Parent = workspace --\x3e prints \\"Child added Hi\\"\\n```","params":[{"name":"eventName","desc":"","lua_type":"string"}],"returns":[{"desc":"","lua_type":"(instance: Instance) -> Observable"}],"function_type":"static","source":{"line":204,"path":"src/blend/src/Client/Blend/Blend.lua"}},{"name":"AccelTween","desc":"Like Blend.Spring, but for AccelTween","params":[{"name":"source","desc":"Source observable (or convertable)","lua_type":"any"},{"name":"acceleration","desc":"Source acceleration (or convertable)","lua_type":"any"}],"returns":[{"desc":"","lua_type":"Observable"}],"function_type":"static","source":{"line":270,"path":"src/blend/src/Client/Blend/Blend.lua"}},{"name":"Spring","desc":"Converts this arbitrary value into an observable that will initialize a spring\\nand interpolate it between values upon subscription.\\n\\n```lua\\nlocal percentVisible = Blend.State(0)\\nlocal visibleSpring = Blend.Spring(percentVisible, 30)\\nlocal transparency = Blend.Computed(visibleSpring, function(percent)\\n\\treturn 1 - percent\\nend);\\n\\nBlend.mount(frame, {\\n\\tBackgroundTransparency = visibleSpring;\\n})\\n```","params":[{"name":"source","desc":"","lua_type":"any"},{"name":"speed","desc":"","lua_type":"any"},{"name":"damper","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"Observable?"}],"function_type":"static","source":{"line":329,"path":"src/blend/src/Client/Blend/Blend.lua"}},{"name":"toPropertyObservable","desc":"Converts this arbitrary value into an observable suitable for use in properties.","params":[{"name":"value","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"Observable?"}],"function_type":"static","source":{"line":384,"path":"src/blend/src/Client/Blend/Blend.lua"}},{"name":"toNumberObservable","desc":"Converts this arbitrary value into an observable that emits numbers.","params":[{"name":"value","desc":"","lua_type":"number | any"}],"returns":[{"desc":"","lua_type":"Observable<number>?"}],"function_type":"static","source":{"line":409,"path":"src/blend/src/Client/Blend/Blend.lua"}},{"name":"toEventObservable","desc":"Converts this arbitrary value into an observable that can be used to emit events.","params":[{"name":"value","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"Observable?"}],"function_type":"static","source":{"line":423,"path":"src/blend/src/Client/Blend/Blend.lua"}},{"name":"toEventHandler","desc":"Converts this arbitrary value into an event handler, which can be subscribed to","params":[{"name":"value","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"function?"}],"function_type":"static","source":{"line":439,"path":"src/blend/src/Client/Blend/Blend.lua"}},{"name":"mountChildren","desc":"Mounts children to the parent and returns an object which will cleanup and delete\\nall children when removed.\\n\\nNote that this effectively recursively mounts children and their values, which is\\nthe heart of the reactive tree.","params":[{"name":"parent","desc":"","lua_type":"Instance"},{"name":"value","desc":"","lua_type":"any"}],"returns":[{"desc":"","lua_type":"MaidTask"}],"function_type":"static","source":{"line":471,"path":"src/blend/src/Client/Blend/Blend.lua"}},{"name":"mount","desc":"Mounts the instance to the props. This handles mounting children, and events.\\n\\nThe contract is that the props table is turned into observables. Note the following.\\n\\n* Keys of strings are turned into properties\\n\\t* If this can be turned into an observable, it will be used to subscribe to this event\\n\\t* Otherwise, we assign directly\\n* Keys of functions are invoked on the instance in question\\n\\t* If this returns an observable (or can be turned into one), we subscribe the event immediately\\n* If the key is [Blend.Children] then we invoke mountChildren on it","params":[{"name":"instance","desc":"","lua_type":"Instance"},{"name":"props","desc":"","lua_type":"table"}],"returns":[{"desc":"","lua_type":"Maid"}],"function_type":"static","source":{"line":552,"path":"src/blend/src/Client/Blend/Blend.lua"}}],"properties":[],"types":[],"name":"Blend","desc":"Declarative UI system inspired by Fusion","source":{"line":5,"path":"src/blend/src/Client/Blend/Blend.lua"}}')}}]);